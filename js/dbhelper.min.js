class DBHelper{static get DATABASE_URL(){const port=1337
    return `http://localhost:${port}/restaurants`}
    static openDatabase(){if(!navigator.serviceWorker){console.log('This browser doesn\'t support Service Worker');return Promise.resolve();if(!('indexedDB' in window)){console.log('This browser doesn\'t support IndexedDB');return Promise.resolve()}}
    return idb.open('restaurants',1,upgradeDb=>{upgradeDb.createObjectStore('restaurants',{keyPath:'id'})})}
    static fetchRestaurants(callback){this._dbPromise=this.openDatabase();fetch(DBHelper.DATABASE_URL).then(res=>res.json()).then(res=>callback(null,res)).catch(error=>callback(error,null))}
    static fetchRestaurantById(id,callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error){callback(error,null)}else{const restaurant=restaurants.find(r=>r.id==id);if(restaurant){callback(null,restaurant)}else{callback('Restaurant does not exist',null)}}})}
    static fetchRestaurantByCuisine(cuisine,callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error){callback(error,null)}else{const results=restaurants.filter(r=>r.cuisine_type==cuisine);callback(null,results)}})}
    static fetchRestaurantByNeighborhood(neighborhood,callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error){callback(error,null)}else{const results=restaurants.filter(r=>r.neighborhood==neighborhood);callback(null,results)}})}
    static fetchRestaurantByCuisineAndNeighborhood(cuisine,neighborhood,callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error){callback(error,null)}else{let results=restaurants
    if(cuisine!='all'){results=results.filter(r=>r.cuisine_type==cuisine)}
    if(neighborhood!='all'){results=results.filter(r=>r.neighborhood==neighborhood)}
    callback(null,results)}})}
    static fetchNeighborhoods(callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error){callback(error,null)}else{const neighborhoods=restaurants.map((v,i)=>restaurants[i].neighborhood)
    const uniqueNeighborhoods=neighborhoods.filter((v,i)=>neighborhoods.indexOf(v)==i)
    callback(null,uniqueNeighborhoods)}})}
    static fetchCuisines(callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error){callback(error,null)}else{const cuisines=restaurants.map((v,i)=>restaurants[i].cuisine_type)
    const uniqueCuisines=cuisines.filter((v,i)=>cuisines.indexOf(v)==i)
    callback(null,uniqueCuisines)}})}
    static urlForRestaurant(restaurant){return(`./restaurant.html?id=${restaurant.id}`)}
    static imageUrlForRestaurant(restaurant,size){return(`/img/${restaurant.id}_${size}.webp`)}
    static mapMarkerForRestaurant(restaurant,map){const marker=new google.maps.Marker({position:restaurant.latlng,title:restaurant.name,url:DBHelper.urlForRestaurant(restaurant),map:map,animation:google.maps.Animation.DROP});return marker}}